{"version":3,"sources":["views/Main.js","Components/Input.js","Components/PetForm.js","views/NewPet.js","views/EditPet.js","views/Details.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","useState","pets","setPets","useEffect","axios","get","then","res","data","sort","a","b","type","catch","err","console","log","to","className","map","pet","idx","key","name","_id","Input","label","error","value","handleChange","style","color","onChange","e","PetForm","form","handleSubmit","submitValue","errors","onSubmit","message","description","skillOne","skillTwo","skillThree","NewPet","initialState","newPet","setNewPet","setErrors","target","preventDefault","post","navigate","response","EditPet","id","editPet","setEditPet","put","Details","setPet","onClick","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83891a9e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {Link} from '@reach/router';\r\nimport axios from 'axios';\r\n\r\nconst Main = (props) => {\r\n    const [pets, setPets] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:8000/api/pets`)\r\n            .then(res=> setPets(res.data.sort((a, b) => a.type > b.type ? 1 : -1 )))\r\n            .catch(err => console.log(err))\r\n    })\r\n\r\n    // const destroyPet = (e, id) => {\r\n    //     axios.delete(`http://localhost:8000/api/pet/${id}`)\r\n    //         .then(res => {\r\n    //             setPets(\r\n    //             pets.filter(pet => pet._id !== id)\r\n    //         )\r\n    //         })\r\n    //         .catch(err => console.log(err))\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <Link to=\"/pet/new\">Add Pet</Link>\r\n            <table className=\"table table-ordered col-8 mx-auto\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Pet Name</th>\r\n                        <th>Type</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        pets.map((pet,idx) => {\r\n                        return <tr key={idx} >\r\n                                    <td>\r\n                                        {pet.name}\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        {pet.type}\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <Link className=\"btn btn-warning\" to={`/pet/${pet._id}/edit/`} >Edit</Link>\r\n                                        <Link className=\"btn btn-success\" to={`/pet/${pet._id}`} >Details</Link>\r\n                                    </td>\r\n\r\n                                    {/* <td>\r\n                                        <Link className=\"btn btn-primary\" to={`/author/${author._id}/edit`} >Like</Link>\r\n                                    </td> */}\r\n                                </tr>\r\n                    }\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nconst Input = ({label, error, type, name, value, handleChange}) => {\r\n    return(\r\n        <div className=\"form-group\">\r\n            <span style={{color:\"red\"}}>{error ? error: null}</span><br></br>\r\n            <label>{label}</label>\r\n            <input className=\"form-control\" name={name} value={value} onChange={(e) => handleChange(e)}></input>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport Input from \"./Input\";\r\n\r\nconst PetForm = ({form, handleChange, handleSubmit, submitValue, errors }) => {\r\n    return (\r\n        <form className=\"col-5 mx-auto\" onSubmit={(e) => handleSubmit(e)}>\r\n            <Input \r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={form.name}\r\n                handleChange={handleChange}\r\n                error={errors.name ? errors.name.message : null}\r\n                label=\"Pet Name: \"\r\n            />\r\n\r\n            <Input \r\n                type=\"text\"\r\n                name=\"type\"\r\n                value={form.type}\r\n                handleChange={handleChange}\r\n                error={errors.type ? errors.type.message : null}\r\n                label=\"Pet Type: \"\r\n            />\r\n\r\n            <Input \r\n                type=\"text\"\r\n                name=\"description\"\r\n                value={form.description}\r\n                handleChange={handleChange}\r\n                error={errors.description ? errors.description.message : null}\r\n                label=\"Pet Description: \"\r\n            />\r\n\r\n            <Input \r\n                type=\"text\"\r\n                name=\"skillOne\"\r\n                value={form.skillOne}\r\n                handleChange={handleChange}\r\n                label=\"First Skill: \"\r\n            />\r\n\r\n            <Input \r\n                type=\"text\"\r\n                name=\"skillTwo\"\r\n                value={form.skillTwo}\r\n                handleChange={handleChange}\r\n                label=\"Second Skill: \"\r\n            />\r\n\r\n            <Input \r\n                type=\"text\"\r\n                name=\"skillThree\"\r\n                value={form.skillThree}\r\n                handleChange={handleChange}\r\n                label=\"Third Skill: \"\r\n            />\r\n\r\n            <input className=\"btn btn-success\" type=\"submit\" value={submitValue} />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PetForm;","import React, { useState } from 'react';\r\nimport {Link, navigate} from '@reach/router';\r\nimport PetForm from \"../Components/PetForm\";\r\nimport axios from \"axios\";\r\n\r\nconst NewPet = (props) => {\r\n    const initialState = {\r\n        name:\"\",\r\n        type:\"\",\r\n        description:\"\",\r\n        skillOne:\"\",\r\n        skillTwo:\"\",\r\n        skillThree:\"\"\r\n    }\r\n\r\n    const [newPet, setNewPet] = useState(initialState);\r\n    const [errors, setErrors] = useState(initialState);\r\n\r\n    const handleChange = (e) => {\r\n        setNewPet({\r\n            ...newPet,\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        axios.post(\"http://localhost:8000/api/pet\", newPet)\r\n            .then(res => {navigate('/'); })\r\n            .catch(err => setErrors(err.response.data));\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <Link to=\"/\">Back to Homepage</Link>\r\n\r\n            <h2>Add New Pet</h2>\r\n            <PetForm \r\n                form={newPet}\r\n                errors={errors}\r\n                handleChange={handleChange}\r\n                handleSubmit={handleSubmit}\r\n                submitValue=\"add pet\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewPet;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { navigate, Link } from '@reach/router';\r\nimport PetForm from '../Components/PetForm';\r\n\r\nconst EditPet = ({id}) => {\r\n        \r\n        const initialState = {\r\n            name:\"\",\r\n            type:\"\",\r\n            description:\"\",\r\n            skillOne:\"\",\r\n            skillTwo:\"\",\r\n            skillThree:\"\"\r\n        }\r\n        \r\n        const [editPet, setEditPet] = useState({});\r\n        const [errors, setErrors] = useState(initialState);\r\n\r\n        useEffect (() => {\r\n            axios.get(`http://localhost:8000/api/pet/${id}`)\r\n            .then(res=> setEditPet(res.data))\r\n            .catch(err => console.log(err))\r\n        }, [id])\r\n\r\n        const handleChange = (e) => {\r\n            setEditPet ({\r\n                ...editPet,\r\n                [e.target.name]: e.target.value\r\n            })\r\n        }\r\n\r\n        const handleSubmit = (e) => {\r\n            e.preventDefault();\r\n            axios.put(`http://localhost:8000/api/pet/${id}`, editPet)\r\n                .then(res => navigate('/'))\r\n                .catch(err => setErrors(err.response.data))\r\n        }\r\n\r\n    return(\r\n        <div>\r\n            <Link to=\"/\">Back to Homepage</Link>\r\n\r\n            <h2>Edit to Pet</h2>\r\n            <PetForm\r\n                form={editPet}\r\n                errors={errors}\r\n                handleChange={handleChange}\r\n                handleSubmit={handleSubmit}\r\n                submitValue=\"Edit\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditPet;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, navigate } from \"@reach/router\";\r\n\r\nconst Details = ({id}) => {\r\n    const [pet, setPet] = useState({});\r\n\r\n    useEffect (() => {\r\n        axios.get(`http://localhost:8000/api/pet/${id}`)\r\n            .then(res=> setPet(res.data) )\r\n            .catch(err => console.log(err))\r\n    }, [id])\r\n\r\n    const destroyPet = () => {\r\n        axios.delete(`http://localhost:8000/api/pet/${id}`)\r\n            .then(res => navigate('/'))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to=\"/\" >Back to Homepage</Link>\r\n\r\n            <div className=\"card\">\r\n                <h2>{pet.name}</h2>\r\n                <p>{pet.description}</p>\r\n\r\n                <div>\r\n                    <h4>Skills if any:</h4>\r\n                    <ol>\r\n                        <li>{pet.skillOne}</li>\r\n                        <li>{pet.skillTwo}</li>\r\n                        <li>{pet.skillThree}</li>\r\n                    </ol>\r\n                </div>\r\n\r\n                <button className=\"btn btn-danger col-5 mx-auto\"  onClick={() => destroyPet()}>Adopt this pet!</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Details;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport { Router } from '@reach/router'; \nimport Main from './views/Main';\nimport NewPet from './views/NewPet';\nimport EditPet from './views/EditPet';\nimport Details from './views/Details';\n\n//remember to import axios and  @react/router for {Link}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Welcome to the Pet Shelter!</h1>\n        <Router>\n          <Main path='/' />\n          <NewPet path='/pet/new' />\n          <EditPet path='/pet/:id/edit' />\n          <Details path='/pet/:id' />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}